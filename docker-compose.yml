services:
  # Database Service (MySQL)
  db:
    image: mysql:8.0
    container_name: ai_edge_unified_db
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: 'ai_edge_root_2024'
      MYSQL_DATABASE: 'ai_edge'
      MYSQL_USER: 'ai_edge_user'
      MYSQL_PASSWORD: 'ai_edge_pass_2024'
    volumes:
      - db_data:/var/lib/mysql
      - ./src/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "3307:3306"
    networks:
      - ai_edge_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis Service (for caching and session management)
  redis:
    image: redis:7-alpine
    container_name: ai_edge_unified_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    networks:
      - ai_edge_network
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data

  # Backend API Service
  backend:
    build:
      context: .
      dockerfile: src/api/Dockerfile
    image: ai-edge-unified-backend:latest
    container_name: ai_edge_unified_backend
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    ports:
      - "8000:8000"
    environment:
      # Database configuration
      MYSQL_HOST: 'db'
      MYSQL_USER: 'ai_edge_user'
      MYSQL_PASSWORD: 'ai_edge_pass_2024'
      MYSQL_DATABASE: 'ai_edge'
      MYSQL_PORT: 3306
      
      # Redis configuration
      REDIS_HOST: 'redis'
      REDIS_PORT: 6379
      
      # Platform configuration
      PLATFORM: 'cpu_x86'
      
      # API configuration
      API_HOST: '0.0.0.0'
      API_PORT: 8000
      
      # Logging
      LOG_LEVEL: 'INFO'
    volumes:
      - ./models:/app/models
      - ./configs:/app/configs:ro
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    networks:
      - ai_edge_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    image: ai-edge-unified-frontend:latest
    container_name: ai_edge_unified_frontend
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
    ports:
      - "8080:80"
    environment:
      - API_BASE_URL=http://backend:8000
    networks:
      - ai_edge_network

networks:
  ai_edge_network:
    driver: bridge
    name: ai_edge_unified_network

volumes:
  db_data:
    driver: local
    name: ai_edge_unified_db_data
  redis_data:
    driver: local
    name: ai_edge_unified_redis_data 