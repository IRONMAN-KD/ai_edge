version: '3.8'

services:
  # MySQL数据库
  mysql:
    image: mysql:8.0
    container_name: ai-edge-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: root_password
      MYSQL_DATABASE: ai_edge
      MYSQL_USER: ai_edge
      MYSQL_PASSWORD: ai_edge_password
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - ai-edge-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: ai-edge-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ai-edge-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 3s
      retries: 5

  # Golang API服务
  api:
    build:
      context: ..
      dockerfile: deployments/Dockerfile
    container_name: ai-edge-api
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - CONFIG_PATH=./configs/config.yaml
      - DATABASE_HOST=mysql
      - DATABASE_PORT=3306
      - DATABASE_USERNAME=ai_edge
      - DATABASE_PASSWORD=ai_edge_password
      - DATABASE_NAME=ai_edge
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - GRPC_INFERENCE_SERVICE_ADDR=inference:9091
    volumes:
      - ../configs:/root/configs
      - api_logs:/root/logs
      - api_uploads:/root/uploads
    networks:
      - ai-edge-network
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      timeout: 5s
      retries: 5
      start_period: 30s

  # Golang gRPC管理服务
  manager:
    build:
      context: ..
      dockerfile: deployments/Dockerfile
    container_name: ai-edge-manager
    restart: unless-stopped
    ports:
      - "9090:9090"
    environment:
      - CONFIG_PATH=./configs/config.yaml
      - DATABASE_HOST=mysql
      - DATABASE_PORT=3306
      - DATABASE_USERNAME=ai_edge
      - DATABASE_PASSWORD=ai_edge_password
      - DATABASE_NAME=ai_edge
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    volumes:
      - ../configs:/root/configs
      - manager_logs:/root/logs
    networks:
      - ai-edge-network
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: ["./manager"]
    healthcheck:
      test: ["CMD", "grpc_health_probe", "-addr=localhost:9090"]
      timeout: 5s
      retries: 5
      start_period: 30s

  # Python推理服务（占位符，需要根据实际Python服务调整）
  inference:
    image: python:3.9-slim
    container_name: ai-edge-inference
    restart: unless-stopped
    ports:
      - "9091:9091"
    environment:
      - PYTHONPATH=/app
      - GRPC_PORT=9091
    volumes:
      - ../../src:/app  # 挂载Python源码目录
      - inference_models:/app/models
    networks:
      - ai-edge-network
    working_dir: /app
    command: >
      bash -c "
        pip install -r requirements.txt &&
        python -m inference.grpc_server
      "
    healthcheck:
      test: ["CMD", "python", "-c", "import grpc; grpc.channel_ready_future(grpc.insecure_channel('localhost:9091')).result(timeout=5)"]
      timeout: 10s
      retries: 5
      start_period: 60s

  # Nginx反向代理（可选）
  nginx:
    image: nginx:alpine
    container_name: ai-edge-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - nginx_logs:/var/log/nginx
    networks:
      - ai-edge-network
    depends_on:
      - api
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      timeout: 5s
      retries: 3



volumes:
  mysql_data:
  redis_data:
  api_logs:
  api_uploads:
  manager_logs:
  inference_models:
  nginx_logs:

networks:
  ai-edge-network:
    driver: bridge